load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Rule repository, note that it's recommended to use a pinned commit to a released version of the rules
# http_archive(
#    name = "rules_foreign_cc",
#    strip_prefix = "rules_foreign_cc-0.6.0",
#    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.6.0.tar.gz",
#)

# load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

# This sets up some common toolchains for building targets. For more details, please see
# https://github.com/bazelbuild/rules_foreign_cc/tree/main/docs#rules_foreign_cc_dependencies
# rules_foreign_cc_dependencies()

_ALL_CONTENT = """\
filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
"""

# # Using a protobuf javalite version that contains @com_google_protobuf_javalite//:javalite_toolchain
# http_archive(
#     name = "com_google_protobuf_javalite",
#     strip_prefix = "protobuf-javalite",
#     urls = ["https://github.com/google/protobuf/archive/javalite.zip"],
# )
#
#
# http_archive(
#     name = "com_google_protobuf_cc",
#     strip_prefix = "protobuf-3.19.6",
#     urls = ["https://github.com/protocolbuffers/protobuf/archive/v3.19.6.tar.gz"],
# )
#
# http_archive(
#     name = "com_google_protobuf_java",
#     strip_prefix = "protobuf-3.19.6",
#     urls = ["https://github.com/protocolbuffers/protobuf/archive/v3.19.6.tar.gz"],
# )
#
# # Load common dependencies.
# load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
# protobuf_deps()
load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies", "rules_cc_toolchains")
rules_cc_dependencies()
rules_cc_toolchains()

http_archive(
    name = "com_google_ukey2",
    strip_prefix = "ukey2-master",
    urls = ["https://github.com/google/ukey2/archive/master.zip"],
)

http_archive(
    name = "aappleby_smhasher",
    strip_prefix = "smhasher-master",
    build_file_content = """
package(default_visibility = ["//visibility:public"])
cc_library(
    name = "libmurmur3",
    srcs = ["src/MurmurHash3.cpp"],
    hdrs = ["src/MurmurHash3.h"],
    copts = ["-Wno-implicit-fallthrough"],
    licenses = ["unencumbered"],  # MurmurHash is explicity public-domain
)""",
    urls = ["https://github.com/aappleby/smhasher/archive/master.zip"],
)


http_archive(
    name = "com_google_webrtc",
    build_file_content = """
package(default_visibility = ["//visibility:public"])
""",
    urls = ["https://webrtc.googlesource.com/src/+archive/main.tar.gz"],
)


# ----------------------------------------------
# Nisaba: Script processing library from Google:
# ----------------------------------------------
# We depend on some of core C++ libraries from Nisaba and use the fresh code
# from the HEAD. See
#   https://github.com/google-research/nisaba

nisaba_version = "main"

http_archive(
    name = "com_google_nisaba",
    url = "https://github.com/google-research/nisaba/archive/refs/heads/%s.zip" % nisaba_version,
    strip_prefix = "nisaba-%s" % nisaba_version,
)

load("@com_google_nisaba//bazel:workspace.bzl", "nisaba_public_repositories")

nisaba_public_repositories()
# -------------------------------------------------------------------------
# Protocol buffer matches (should be part of gmock and gtest, but not yet):
#   https://github.com/inazarenko/protobuf-matchers

http_archive(
    name = "com_github_protobuf_matchers",
    urls = ["https://github.com/inazarenko/protobuf-matchers/archive/refs/heads/master.zip"],
    strip_prefix = "protobuf-matchers-master",
)
# bazel_pkg_config
http_archive(
    name = "bazel_pkg_config",
    strip_prefix = "bazel_pkg_config-master",
    urls = ["https://github.com/cherrry/bazel_pkg_config/archive/master.zip"],
)

load("@bazel_pkg_config//:pkg_config.bzl", "pkg_config")

pkg_config(
    name = "libsystemd",
    pkg_name = "libsystemd",
)

pkg_config(
    name = "libcurl",
    pkg_name = "libcurl",
)

pkg_config(
    name = "sdbus_cpp",
    pkg_name = "sdbus-c++",
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")
rules_rust_dependencies()
rust_register_toolchains()


load("@rules_rust//crate_universe:defs.bzl", "crates_repository")

crates_repository(
    name = "crates",
    cargo_lockfile = "//rust:Cargo.lock",
    lockfile = "//rust:Cargo.lock",
    manifests = ["//rust:Cargo.toml"],
)

load("@crates//:defs.bzl", "crate_repositories")

crate_repositories()

